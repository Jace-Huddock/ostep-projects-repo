####README: Project 3 Memory API - Jace Huddock ###########


c files (in a zip file)
your answers in ONE pdf/word file (NOT in the zip file)

1. First, write a simple program called null.c that creates a pointer to an integer, sets it to NULL, and then tries to dereference it. Compile this into an executable called null. What happens when you run this program?

-When you attempt to dereference a null pointer, a segmentation fault occurs. According to the ostep book "The term segmentation fault or violation arises forma memory access on a segmented machine to an illegal address." 

2. Next, compile this program with symbol information included (with the -g flag). Doing so let’s put more information into the executable, enabling the debugger to access more useful information about variable names and the like. Run the program under the debugger by typing gdb null and then, once gdb is running, typing run. What does gdb show you?

-Upon compiling with symbol information included, and running under the debugger, GDB shows you "Program received signal SIGSEGV, Segmentation fault. 
0x0000555555554665 in main()". I believe it now shows you the address that it attempted to access.

3. Finally, use the valgrind tool on this program. We’ll use the memcheck tool that is a part of valgrind to analyze what happens. Run this by typing in the following: valgrind --leak-check=yes null. What happens when you run this? Can you interpret the output from the tool? 

-Upon running Valgrind on this program, Valgrind provides you with a summary of memory problems with your program. In this case, it gives "Invalid read of size 4 at 0x108665: main (in /home/test1/assignment3/null) Address 0x0 is not stack'd, malloc'd or (recently) free'd. 

So essentially valgrind gives you more specific information about the segmentation fault that occurred, telling us that there was an invalid read of an address. This makes sense because you cannot read a null pointer, which is what happens when you attempt to dereference. 

4. Write a simple program that allocates memory using malloc()but forgets to free it before exiting. What happens when this program runs? Can you use gdb to find any problems with it? How about valgrind (again with the --leak-check=yes flag)?

-My program simply allocates memory for 5 integers, then loops through them and prints out their position in an array. Although I neglect to free the memory, the program produces the expected output (even when ran with -Wall -Werror -g). When ran with gdb, it again produces correct output but now has the tag [Inferior 1 (process 29149) exited normally]. This leads me to believe gdb is incapable of picking up on this error. Valgrind, however, gives quite a bit of information on this error. It says "Conditional jump or move depends on unitialized value(s) ... at the print statement, for each time it prints, and also says that 20 bytes in 1 blocks are definitely lost, and tells me that it is lost at the line where I used 'malloc'. Upon using free() and running valgrind again, it says in the 'HEAP SUMMARY:' that 0 bytes in 0 blocks are in use. 

5. Write a program that creates an array of integers called dataofsize 100 using malloc; then, set data[100] to zero. What happens when you run this program? What happens when you run this program using valgrind? Is the program correct?

-Upon running this program, there are no errors or warnings that the compiler throws at you. However, when you run this program using valgrind, it will tell you that there is an 'Invalid write of size 4 at 0x108671: main (dataOneHundred.c:9)'. So it lets you know that the program attempted to write 4 bytes after allocating the 400 bytes (for the size 100 array) and that those 4 bytes were never allocated - thus invalidating the program. Even though the program compiles without errors - it is not correct. 

6.Create a program that allocates an array of integers (as above), frees them, and then tries to print the value of one of the elements of the array. Does the program run? What happens when you use valgrind on it?

-In this case, the program runs but appears to just print out garbage values. I even went so far as to initialize the values I was going to print to 10 and 15 before freeing them - but they still came out as garbage. When you try to access the free'd values, Valgrind outputs 'Invalid read of size 4 at 0x.... : main() Adress 0x.... is 8 bytes inside a block of size 400 free'd by 0x... :main (:10). So it gives information about how much memory was allocated then freed, and tells you where in the program it was free'd at. 

7. Now pass a funny value to free (e.g., a pointer in the middle of the array you allocated above). What happens? Do you need tools to find this type of problem?

-This type of problem does not require special tools to resolve. The compiler catches this error, saying 'Passing argument 1 of 'free' makes pointer from integer without a cast' and then shows you where the error is. 

8. Try out some of the other interfaces to memory allocation. For example, create a simple vector-like data structure and related routines that use realloc() to manage the vector. Use an array to store the vectors elements; when a user adds an entry to the vector, use realloc() to allocate more space for it. How well does such a vector perform? How does it compare to a linked list? Use valgrind to help you find bugs.

-Vectors perform well in the case of wanting to read a random element. Also, inserting and deleting the final element of a vector can be done in constant time, whereas doing so in any other position requires linear time. On the other hand, linked lists are efficient when adding elements to the front or back, both being done in constant time. 

